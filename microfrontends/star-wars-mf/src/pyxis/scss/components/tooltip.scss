@use "../foundations";
@use "mixins";
@use "sass:math";

// Setting of the tooltip arrow
$_arrow: "%3Csvg width='16' height='8' viewBox='0 0 16 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.50518 0.681671L0 8H16L9.49482 0.681671C8.69924 -0.213359 7.30076 -0.213359 6.50518 0.681671Z' fill='%2321283b'/%3E%3C/svg%3E";
$_arrowAlt: "%3Csvg width='16' height='8' viewBox='0 0 16 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.50518 0.681671L0 8H16L9.49482 0.681671C8.69924 -0.213359 7.30076 -0.213359 6.50518 0.681671Z' fill='%23ffffff'/%3E%3C/svg%3E";
$_arrowBrand: "%3Csvg width='16' height='8' viewBox='0 0 16 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.50518 0.681671L0 8H16L9.49482 0.681671C8.69924 -0.213359 7.30076 -0.213359 6.50518 0.681671Z' fill='%238334c2'/%3E%3C/svg%3E";
$_arrowOffsetWidth: foundations.spacing(s);
$_arrowOffsetHeight: foundations.rem(1px);
$_arrowWidth: foundations.rem(16px);
$_arrowHeight: math.div($_arrowWidth, 2);

// Setting of tooltip
$_tooltipPositionY: calc(100% + #{foundations.spacing(s)});
$_tooltipPositionX: calc(50% - #{$_arrowOffsetWidth} + #{math.div($_arrowWidth, 2)});
$_tooltipOriginLeft: calc(100% - #{$_arrowOffsetWidth} + #{math.div($_arrowWidth, 2)});
$_tooltipOriginRight: $_arrowOffsetWidth + math.div($_arrowWidth, 2);
$_tooltipInitialOffset: foundations.spacing(3xs);

// Map of the CSS properties for positioning and animation of tooltip
// based on its position
$_tooltipPositions: (
  topLeft: (
    bottom: $_tooltipPositionY,
    right: $_tooltipPositionX,
    transform: scale(0.9) translateY($_tooltipInitialOffset),
    transform-origin: $_tooltipOriginLeft bottom,
  ),
  topRight: (
    bottom: $_tooltipPositionY,
    left: $_tooltipPositionX,
    transform: scale(0.9) translateY($_tooltipInitialOffset),
    transform-origin: $_tooltipOriginRight bottom,
  ),
  top: (
    bottom: $_tooltipPositionY,
    left: 50%,
    transform: translateX(-50%) translateY($_tooltipInitialOffset) scale(0.9),
    transform-origin: bottom,
  ),
  right: (
    top: 50%,
    transform: scale(0.9) translateY(-50%) translateX(-$_tooltipInitialOffset),
    left: $_tooltipPositionY,
    transform-origin: left top,
  ),
  bottomLeft: (
    top: $_tooltipPositionY,
    right: $_tooltipPositionX,
    transform: scale(0.9) translateY(-$_tooltipInitialOffset),
    transform-origin: $_tooltipOriginLeft top,
  ),
  bottomRight: (
    top: $_tooltipPositionY,
    left: $_tooltipPositionX,
    transform: scale(0.9) translateY(-$_tooltipInitialOffset),
    transform-origin: $_tooltipOriginRight top,
  ),
  bottom: (
    top: $_tooltipPositionY,
    left: 50%,
    transform: translateY(-$_tooltipInitialOffset) translateX(-50%) scale(0.9),
    transform-origin: top,
  ),
  left: (
    top: 50%,
    transform: scale(0.9) translateY(-50%) translateX($_tooltipInitialOffset),
    right: $_tooltipPositionY,
    transform-origin: right top,
  ),
);

// Map of the CSS properties for the positioning of the arrow
// based on tooltip position
$_arrowPositions: (
  topLeft: (
    bottom: $_arrowOffsetHeight,
    right: $_arrowOffsetWidth,
    transform: rotate(180deg),
  ),
  topRight: (
    bottom: $_arrowOffsetHeight,
    left: $_arrowOffsetWidth,
    transform: rotate(180deg),
  ),
  top: (
    bottom: $_arrowOffsetHeight,
    left: calc(50% - #{math.div($_arrowWidth, 2)}),
    transform: rotate(180deg),
  ),
  right: (
    top: calc(50% - #{$_arrowHeight}),
    left: -$_arrowHeight + $_arrowOffsetHeight,
    transform: rotate(270deg),
  ),
  bottomLeft: (
    top: -$_arrowHeight + $_arrowOffsetHeight,
    right: $_arrowOffsetWidth,
    transform: rotate(0),
  ),
  bottomRight: (
    top: -$_arrowHeight + $_arrowOffsetHeight,
    left: $_arrowOffsetWidth,
    transform: rotate(0),
  ),
  bottom: (
    top: -$_arrowHeight + $_arrowOffsetHeight,
    left: calc(50% - #{math.div($_arrowWidth, 2)}),
    transform: rotate(0deg),
  ),
  left: (
    top: calc(50% - #{$_arrowHeight}),
    right: -$_arrowHeight + $_arrowOffsetHeight,
    transform: rotate(90deg),
  ),
);

// It sets the color and background color of the tooltip and the arrow
//
// @param {Color} $backgroundColor - Value of the background color
// @param {Color} $color - Value of the color
@mixin _setColors($backgroundColor, $color: neutralLight) {
  background-color: foundations.color($backgroundColor);
  color: foundations.color($color);
}

.tooltip-wrapper {
  display: inline-flex;
  position: relative;
  width: fit-content;
}

.tooltip-close {
  @include foundations.absolute;
}

.tooltip {
  $maxWidth: foundations.rem(320px);
  @include _setColors(neutralBase);
  @include foundations.radius(s);
  @include foundations.text(m, book);
  align-items: center;
  column-gap: foundations.spacing(xs);
  display: grid;
  grid-auto-columns: fit-content($maxWidth);
  grid-auto-flow: column;
  max-width: $maxWidth;
  opacity: 0;
  padding: foundations.spacing(xs s);
  position: absolute;
  transition-duration: foundations.duration(fast);
  transition-property: transform, opacity, visibility;
  transition-timing-function: foundations.timing(base);
  visibility: hidden;
  width: max-content;
  z-index: foundations.zIndex(tooltip);

  &:before {
    @include mixins.backgroundImage($_arrow);
    content: "";
    height: $_arrowHeight;
    position: absolute;
    transform-origin: bottom;
    width: $_arrowWidth;
  }

  &:after {
    content: "";
    height: $_arrowWidth * 2;
    position: absolute;
    width: $_arrowWidth * 3;
  }

  &.tooltip--open,
  .tooltip-wrapper:hover &:not(.tooltip--controlled),
  .tooltip-wrapper:focus-within &:not(.tooltip--controlled) {
    opacity: 1;
    transform: scale(1);
    visibility: visible;

    &.tooltip--left,
    &.tooltip--right {
      transform: scale(1) translateY(-50%);
    }

    &.tooltip--top,
    &.tooltip--bottom {
      transform: scale(1) translateX(-50%);
    }
  }
}

@each $position, $properties in $_tooltipPositions {
  .tooltip--#{foundations.camelToKebabCase($position)} {
    @each $prop, $value in $properties {
      #{$prop}: $value;
    }
    $arrowProps: map-get($_arrowPositions, $position);
    @each $prop, $value in $arrowProps {
      &:before {
        #{$prop}: $value;
      }
      &:after {
        @if ($prop == "transform") {
          #{$prop}: $value;
        } @else {
          #{$prop}: if(type-of($value) == number, $value - $_arrowOffsetWidth, $value);
        }
      }
    }
  }
}

.tooltip--brand {
  @include _setColors(brandBase);

  &:before {
    @include mixins.backgroundImage($_arrowBrand);
  }
}

.tooltip--alt {
  @include _setColors(neutralLight, neutralBase);

  &:before {
    @include mixins.backgroundImage($_arrowAlt);
  }
}
