@use "../foundations";
@use "animations";
@use "mixins";
@use "sass:math";

$_borderWidth: foundations.rem(2px);
$_outlineWidth: foundations.rem(3px);

// Sizes of Pyxis' buttons.
// Each size has direct influence on properties in the sub-maps.
$_sizes: (
  xl: (
    columnGap: 2xs,
    dimension: foundations.rem(56px),
    loaderSize: foundations.rem(20px),
    minWidth: foundations.rem(220px),
    padding: l,
    ghostPadding: l,
    iconSpacing: l,
    radius: l,
    textSize: l,
  ),
  l: (
    columnGap: 2xs,
    dimension: foundations.rem(48px),
    loaderSize: foundations.rem(20px),
    minWidth: foundations.rem(160px),
    padding: l,
    ghostPadding: s,
    iconSpacing: s,
    radius: 2xl,
    textSize: l,
  ),
  m: (
    columnGap: 3xs,
    dimension: foundations.rem(36px),
    loaderSize: foundations.rem(20px),
    minWidth: foundations.rem(120px),
    padding: s,
    ghostPadding: xs,
    iconSpacing: xs,
    radius: 2xl,
    textSize: m,
  ),
  s: (
    columnGap: 3xs,
    dimension: foundations.rem(28px),
    loaderSize: foundations.rem(16px),
    minWidth: foundations.rem(80px),
    padding: xs,
    ghostPadding: 2xs,
    iconSpacing: 2xs,
    radius: 2xl,
    textSize: s,
  ),
);

// Set background and fill colors of loader
//
// @param {Color} $background - Value of background color
// @param {Color} $fill - Value of fill color
@mixin _loaderColors($background, $fill) {
  border: $_borderWidth solid $background;
  border-top-color: $fill;
}

// Set properties for filled button types: primary and brand button.
//
// @param {String} $gradient - Gradient color used for background
// @param {String} $elevationColor - Name of color + opacity for elevation, i.e. `brand40`
@mixin _filled($gradient, $elevationColor) {
  @include foundations.focus(actionBase);
  background-image: $gradient;
  background-position: 100% 0;
  background-size: 200%;
  color: foundations.color(neutralLight);

  &:hover {
    background-position: 0 100%;
  }

  &:disabled,
  &[disabled] {
    background: foundations.color(neutral95);
  }

  &.button--shadow {
    @include foundations.elevation(m, $elevationColor);

    &:hover,
    &:focus,
    &:active {
      @include foundations.elevation(s, $elevationColor);
    }

    &:disabled,
    &[disabled] {
      box-shadow: none;
    }
  }

  &.button--loading:after {
    @include _loaderColors(
      foundations.color(neutralLightOpacity15),
      foundations.color(neutralLight)
    );
  }

  &.button--alt {
    @include foundations.focus(neutralLight);
    background: foundations.color(neutralLight);
    color: foundations.color(neutralBase);

    &:hover {
      color: foundations.color(actionBase);
    }

    &:disabled,
    &[disabled] {
      background: foundations.color(neutralLightOpacity15);
      color: foundations.color(neutralLightOpacity40);
    }

    &.button--shadow {
      box-shadow: none;
    }

    &.button--loading:after {
      @include _loaderColors(foundations.color(actionLight), foundations.color(actionBase));
    }
  }
}

// Set properties for outlined button types: secondary and tertiary button.
//
// @param {Color} $borderColor - Name of the color used as border
@mixin _outlined($borderColor, $borderColorAlt) {
  @include foundations.focus(actionBase, true);
  border: $_borderWidth solid $borderColor;
  color: foundations.color(actionBase);

  &:hover {
    @include foundations.elevation(s, action15);
    border-color: foundations.color(actionBase);
  }

  &:disabled,
  &[disabled] {
    background: foundations.color(neutral95);
    border-color: transparent;
    box-shadow: none;
  }

  &.button--loading:after {
    @include _loaderColors(foundations.color(actionLight), foundations.color(actionBase));
  }

  &.button--alt {
    @include foundations.focus(neutralLight, true);
    border-color: $borderColorAlt;
    color: foundations.color(neutralLight);

    &:hover {
      background-color: foundations.color(neutralLightOpacity15);
      border-color: foundations.color(neutralLight);
      box-shadow: none;
    }

    &:disabled,
    &[disabled] {
      background: foundations.color(neutralLightOpacity15);
      border-color: transparent;
      color: foundations.color(neutralLightOpacity40);
    }

    &.button--loading:after {
      @include _loaderColors(
        foundations.color(neutralLightOpacity15),
        foundations.color(neutralLight)
      );
    }
  }
}

.button {
  cursor: pointer;
  display: inline-flex;
  grid-auto-flow: column;
  justify-content: center;
  place-items: center;
  position: relative;
  transition-duration: foundations.duration(fast);
  transition-property: background, border-color, box-shadow, color, outline, transform;
  transition-timing-function: foundations.timing(base);
  user-select: none;
  width: fit-content;
  will-change: background, border-color, box-shadow, color, outline, transform;

  &:active:not(:disabled, [disabled]) {
    transform: scale(0.97);
  }

  &:disabled,
  &[disabled] {
    color: foundations.color(neutral50);
    cursor: not-allowed;
  }
}

// Generate classes for sizing and set related properties
@each $size, $properties in $_sizes {
  .button--#{$size} {
    $dimension: foundations.get($properties, dimension);
    $padding: foundations.get($properties, padding);
    $ghostPadding: foundations.get($properties, ghostPadding);
    $iconPadding: foundations.spacing(foundations.get($properties, iconSpacing));
    $iconMargin: foundations.spacing(foundations.get($properties, columnGap));

    @include foundations.text(foundations.get($properties, textSize), bold);
    height: $dimension;

    &:before,
    &:not(.button--ghost) {
      @include foundations.radius(foundations.get($properties, radius));
    }

    &:where(.button--xl):before {
      @include foundations.radius(l);
    }

    &:not(.button--ghost) {
      &.button--min-width {
        min-width: foundations.get($properties, minWidth);
      }

      padding: 0 foundations.spacing($padding);
    }

    &.button--ghost {
      border-radius: math.div($dimension, 2);
      padding: 0 foundations.spacing($ghostPadding);

      &:first-child {
        margin-left: calc(#{foundations.spacing($ghostPadding)} * -1);
      }

      &:last-child {
        margin-right: calc(#{foundations.spacing($ghostPadding)} * -1);
      }
    }

    &.button--append-icon {
      .icon {
        margin-left: $iconMargin;
      }
    }

    &.button--prepend-icon {
      .icon {
        margin-right: $iconMargin;
      }
    }

    &.button--icon-only {
      min-width: initial;
      padding: 0;
      width: $dimension;
    }

    &.button--loading:after {
      height: foundations.get($properties, loaderSize);
      width: foundations.get($properties, loaderSize);
    }
  }
}

.button--primary {
  $_endGradient: #07a5b5;
  @include _filled(
    linear-gradient(45deg, foundations.color(actionBase) 50%, $_endGradient),
    action40
  );
}

.button--brand {
  @include _filled(
    linear-gradient(45deg, foundations.color(brandDark) 50%, foundations.color(brandBase)),
    brand40
  );
}

.button--danger {
  @include _filled(
    linear-gradient(45deg, foundations.color(errorDark) 50%, foundations.color(errorBase)),
    error40
  );
}

.button--secondary {
  @include _outlined(foundations.color(actionBase), foundations.color(neutralLight));
}

.button--tertiary {
  @include _outlined(foundations.color(neutral85), foundations.color(neutralLightOpacity40));
}

.button--ghost {
  @include foundations.focus(actionBase, $radiusSize: 2xs);
  color: foundations.color(actionBase);

  &:hover:not(:disabled, [disabled]) {
    background-color: foundations.color(actionLight);
  }

  &.button--alt {
    color: foundations.color(neutralLight);

    &:hover:not(:disabled, [disabled]) {
      background-color: foundations.color(neutralLightOpacity15);
    }

    &:disabled,
    &[disabled] {
      color: foundations.color(neutralLightOpacity40);
    }
  }
}

.button.button--full-width {
  width: 100%;
}

.button--loading,
.button--loading.button--alt {
  color: transparent;
  pointer-events: none;
  position: relative;

  &:after {
    @include mixins.loadingIcon;
  }
}
